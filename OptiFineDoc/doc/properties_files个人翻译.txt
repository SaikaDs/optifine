=============================================================
Description of OptiFine's configuration properties files
OptiFine的配置属性文件的描述
Based on McPatcher's configuration files
基于McPatcher的配置文件
=============================================================

Overview概述
========

Many OptiFine features use properties files to control how textures within your texture pack are used. 
很多Optifine的特性都使用属性文件来控制你的纹理包里的纹理如何被使用。
Properties files are simple text files similar to the Windows ".ini" format. Each line is a property, specified as name=value.
属性文件就是简单的文本文件，类似于Windows的.ini格式。每一行都是一条属性，形式为name=value.

  # Sample comment
  property1=value
  property2=some_other_value
  
  # Blank lines are allowed
  property3=yet_another_value

All property names are case-sensitive "renderpass" is not the same as "renderPass". The order of properties within the file 
does not matter. Many properties have default values and can be omitted, and in some cases the entire properties file is optional. 
See the sections for each properties file for details.
所有属性名称都是区分大小写的，例如"renderpass"不同于"renderPass"。属性在文件中的顺序不影响。很多属性有默认值，可以省略，有时候整个属性文件都可以省略。
每个属性的具体内容请参见各自的章节。

Certain types of objects are used within properties files by different OptiFine features. 
对象的具体类型由不同的optifine特性在属性文件中使用。

Rather than describe these common types separately in each feature section, they are summarized here instead.
这些常见类型在这里汇总介绍，就不在各自章节里介绍了。

Textures纹理
========

Often, OptiFine requires you to specify a path to an image file or some other resource within your texture pack. 
This is simply the path to the texture within the zip file. The folder structure within a texture pack can get deeply nested, 
so OptiFine has some shortcuts to make things easier. Whenever OptiFine calls for you to provide a texture file, 
any of these options can be used to specify the path.
Optifine一般要求你指定一个图片文件的路径或者你纹理包中其他的资源。
这单纯就是纹理在该压缩包中的路径，纹理包的文件夹结构可以有多层嵌套，因此Optifine拥有一些快捷方式来更便捷地处理。
不论何时，Optifine请求提供一个纹理文件时，这些选项中的任何一个都可以用来确定路径。

The most straightforward method is simply a path relative to assets/minecraft:
最直接的方式就是一个相关于assets/minecraft的路径

  # Full path
  texture=textures/entity/creeper/creeper.png

This refers to "assets/minecraft/textures/entity/creeper/creeper.png" within the zip file or folder of your texture pack. 
这代表了你压缩包里的"assets/minecraft/textures/entity/creeper/creeper.png"这个路径。
Always use forward slashes "/" to separate folder names. Regardless of your OS, do not use backslashes "\" 
路径中必须用正斜杠“/”，不管你是什么操作系统，都别用反斜杠“\”。
or the game will not properly recognize the path.
否则游戏程序不能正确地读取路径。

An optional "namespace" prefix can be added. This example refers to exactly the same "creeper.png" file as above:
可以添加一个可选的字首“namespace”，引用跟上面一样的"creeper.png"文件如下：

  # Full path with namespace
  texture=minecraft:textures/entity/creeper/creeper.png

For textures used by other mods, the namespace will often be something other than "minecraft":
其他mod中使用的纹理的namespace（命名空间）通常不是“minecraft”。
  
  # Full path with mod namespace
  texture=herobrine:textures/entity/him.png

This refers to "assets/herobrine/textures/entity/him.png", not to "assets/minecraft/textures/entity/him.png".

Many textures specific to OptiFine are in the "assets/minecraft/optifine" folder. 
很多Optifine特有的纹理位于"assets/minecraft/optifine"。

Since it is used so frequently, it can be represented by the tilde "~" character. The following refer to the same file:
因为上述路径使用得很频繁，它可以用“~”符号来指代。下面例子都表示同一个文件：

  # Relative to "assets/minecraft/optifine"
  texture=~/dial/clock0.png
  texture=minecraft:optifine/dial/clock0.png

Textures can also be specified relative to the path of the properties file that refers to them. 
For example, within "~/dial/clock.properties" (remember "~" = "assets/minecraft/optifine")

  # Relative path: Bare filename with no slashes
  texture=clock0.png
  # Relative path: Using "./" to denote the current directory
  texture=./clock0.png
  # Absolute path: Using "~"
  texture=~/dial/clock0.png
  # Absolute path: Without namespace
  texture=optifine/dial/clock0.png
  # Absolute path: With namespace
  texture=minecraft:optifine/dial/clock0.png

all refer to the same path, "assets/minecraft/optifine/dial/clock0.png". If the properties file were in another location, 
say ~/misc, then relative paths would be based on that folder instead, but absolute paths would still refer to the dial directory.

In general, try to organize your textures with the properties files that go with them. 
Your paths will be shorter and easier to maintain when you move things around.

Blocks
======

Since 1.7 Minecraft can reference blocks by ID. 
Since 1.13 the numeric blocks IDs are removed and only block names can be used. 

The block IDs continue to exist within the game internally, but can no longer be specified in the configuration files as they are unstable. 
For example the stone block used to be ID 1 but is now called "minecraft:stone". As with textures, the "minecraft:" prefix is optional, 
so just "stone" will also work. Mods will probably use a namespace other than "minecraft" so the prefix will be required there.

See the Dinnerbone's list of Block and Item IDs with names: http://media.dinnerbone.com/uploads/2013-09/files/28_00-44-23_YfmAkomVI.txt

In 1.13 many variant blocks were "flattened" to several simple blocks and the block metadata was removed.
See https://minecraft.gamepedia.com/1.13/Flattening 

The block name format is "<namespace:>name<:property1=value1,...:property2=value1,...>". 
Optional parts are in angle brackets "<>". Default namespace is "minecraft".

  # Short name
  blocks=oak_stairs
    
  # Full name
  blocks=minecraft:oak_stairs
  
  # Mod blocks require full names
  blocks=botania:crate

  # Properties
  blocks=minecraft:oak_stairs:facing=east,west:half=bottom

The "minecraft:" prefix is optional, this can also be written as:

  # Properties
  blocks=oak_stairs:facing=east,west:half=bottom

Items
=====

Since 1.7 items can also be specified by name. 
See Dinnerbone's list of Block and Item IDs with names: http://dinnerbone.com/media/uploads/2013-09/files/28_00-44-23_YfmAkomVI.txt

Since 1.13 items can only be specified by name.
See: https://minecraft.gamepedia.com/1.13/Flattening  

Again, the "minecraft:" prefix is optional.

Biomes
======

For features that call for a list of biomes, use the names from the Minecraft wiki: https://minecraft.gamepedia.com/Biome#Biome_IDs
Biomes added by mods can also be used.

  # Biomes short
  biomes=ocean deep_ocean river beach
  # Biomes full
  biomes=minecraft:ocean biomesoplenty:highland
  
Since 1.13 many biomes have been renamed.
See: https://minecraft.gamepedia.com/1.13/Flattening  

Blending methods
================

When two or more textures are combined, OptiFine offers several options for specifying the blending operation.

Valid blending methods are described below. "This" or "current" texture refers to the texture currently being applied. "Previous" refers to whatever has been rendered so far, which could be a single texture or the result of an earlier blending operation.
- replace: Replace the previous layer entirely with the current bitmap. No blending and only simple on/off transparency.
- alpha: Blend the two textures using this texture's alpha value. This is the most common type of blending.
- overlay: RGB value > 0.5 brightens the previous image, < 0.5 darkens. color is a synonym for this method.
- add: Add this texture's RGB values multiplied by alpha to the previous layer.
- subtract: Subtract this texture's RGB values from the previous layer.
- multiply: Multiply the previous RGB values by this texture's RGB values
- dodge: Add this texture's RGB values to the previous layer.
- burn: New RGB = (1 - current RGB) * previous RGB
- screen: New RGB = 1 - (1 - current RGB) * (1 - previous RGB)

See Blend modes on Wikipedia for some illustrations: https://en.wikipedia.org/wiki/Blend_modes

Number lists
============

Occasionally you will need to specify a list of numbers. OptiFine understands ranges and individual values:

  # Single entry.
  list=1
  # Multiple values listed separately.
  list=1 2 3
  # Same values using ranges.
  list=1-3
  # Multiple ranges.
  list=1-3 6 8 10-15
  # Open-ended ranges
  damage=100-

RGB colors
==========

Color values are specified in hexadecimal RGB format:

  # White
  color=ffffff
  # Black
  color=000000
  # Red
  color=ff0000
  # Green
  color=00ff00
  # Blue
  color=0000ff

References
==========
https://bitbucket.org/prupe/mcpatcher/wiki/About_Properties_Files
http://dinnerbone.com/media/uploads/2013-09/files/28_00-44-23_YfmAkomVI.txt
http://www.minecraftforum.net/forums/mapping-and-modding/resource-packs/1226351-1?comment=11315
http://www.minecraftforum.net/forums/mapping-and-modding/resource-packs/1226351-1?comment=11128
https://minecraft.gamepedia.com/1.13/Flattening
